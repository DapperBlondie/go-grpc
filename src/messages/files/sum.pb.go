// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: sum.proto

package files

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []int32 `protobuf:"varint,1,rep,packed,name=list,proto3" json:"list,omitempty"`
}

func (x *SumRequest) Reset() {
	*x = SumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sum_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumRequest) ProtoMessage() {}

func (x *SumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sum_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumRequest.ProtoReflect.Descriptor instead.
func (*SumRequest) Descriptor() ([]byte, []int) {
	return file_sum_proto_rawDescGZIP(), []int{0}
}

func (x *SumRequest) GetList() []int32 {
	if x != nil {
		return x.List
	}
	return nil
}

type SumResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SumResponse) Reset() {
	*x = SumResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sum_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumResponse) ProtoMessage() {}

func (x *SumResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sum_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumResponse.ProtoReflect.Descriptor instead.
func (*SumResponse) Descriptor() ([]byte, []int) {
	return file_sum_proto_rawDescGZIP(), []int{1}
}

func (x *SumResponse) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

type NumberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num int32 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *NumberRequest) Reset() {
	*x = NumberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sum_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberRequest) ProtoMessage() {}

func (x *NumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sum_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberRequest.ProtoReflect.Descriptor instead.
func (*NumberRequest) Descriptor() ([]byte, []int) {
	return file_sum_proto_rawDescGZIP(), []int{2}
}

func (x *NumberRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type AverageResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Average float32 `protobuf:"fixed32,1,opt,name=average,proto3" json:"average,omitempty"`
}

func (x *AverageResultResponse) Reset() {
	*x = AverageResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sum_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AverageResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AverageResultResponse) ProtoMessage() {}

func (x *AverageResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sum_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AverageResultResponse.ProtoReflect.Descriptor instead.
func (*AverageResultResponse) Descriptor() ([]byte, []int) {
	return file_sum_proto_rawDescGZIP(), []int{3}
}

func (x *AverageResultResponse) GetAverage() float32 {
	if x != nil {
		return x.Average
	}
	return 0
}

type NumReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqNum int32 `protobuf:"varint,1,opt,name=req_num,json=reqNum,proto3" json:"req_num,omitempty"`
}

func (x *NumReq) Reset() {
	*x = NumReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sum_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumReq) ProtoMessage() {}

func (x *NumReq) ProtoReflect() protoreflect.Message {
	mi := &file_sum_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumReq.ProtoReflect.Descriptor instead.
func (*NumReq) Descriptor() ([]byte, []int) {
	return file_sum_proto_rawDescGZIP(), []int{4}
}

func (x *NumReq) GetReqNum() int32 {
	if x != nil {
		return x.ReqNum
	}
	return 0
}

type NumResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RespNum string `protobuf:"bytes,1,opt,name=resp_num,json=respNum,proto3" json:"resp_num,omitempty"`
}

func (x *NumResp) Reset() {
	*x = NumResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sum_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumResp) ProtoMessage() {}

func (x *NumResp) ProtoReflect() protoreflect.Message {
	mi := &file_sum_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumResp.ProtoReflect.Descriptor instead.
func (*NumResp) Descriptor() ([]byte, []int) {
	return file_sum_proto_rawDescGZIP(), []int{5}
}

func (x *NumResp) GetRespNum() string {
	if x != nil {
		return x.RespNum
	}
	return ""
}

var File_sum_proto protoreflect.FileDescriptor

var file_sum_proto_rawDesc = []byte{
	0x0a, 0x09, 0x73, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x73, 0x75, 0x6d,
	0x22, 0x20, 0x0a, 0x0a, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x25, 0x0a, 0x0b, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x21, 0x0a, 0x0d, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x31, 0x0a, 0x15,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x22,
	0x21, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x71, 0x4e,
	0x75, 0x6d, 0x22, 0x24, 0x0a, 0x07, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x70, 0x4e, 0x75, 0x6d, 0x32, 0xfd, 0x01, 0x0a, 0x0a, 0x53, 0x75, 0x6d,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0f, 0x2e, 0x73, 0x75, 0x6d, 0x2e, 0x53, 0x75,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x73, 0x75, 0x6d, 0x2e, 0x53,
	0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0f, 0x2e, 0x73, 0x75, 0x6d, 0x2e, 0x53, 0x75, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x73, 0x75, 0x6d, 0x2e, 0x53, 0x75, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x16,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x2e, 0x73, 0x75, 0x6d, 0x2e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x75, 0x6d,
	0x2e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x2c, 0x0a, 0x09, 0x45, 0x76,
	0x65, 0x6e, 0x4f, 0x72, 0x4f, 0x64, 0x64, 0x12, 0x0b, 0x2e, 0x73, 0x75, 0x6d, 0x2e, 0x4e, 0x75,
	0x6d, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x73, 0x75, 0x6d, 0x2e, 0x4e, 0x75, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x10, 0x5a, 0x0e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_sum_proto_rawDescOnce sync.Once
	file_sum_proto_rawDescData = file_sum_proto_rawDesc
)

func file_sum_proto_rawDescGZIP() []byte {
	file_sum_proto_rawDescOnce.Do(func() {
		file_sum_proto_rawDescData = protoimpl.X.CompressGZIP(file_sum_proto_rawDescData)
	})
	return file_sum_proto_rawDescData
}

var file_sum_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_sum_proto_goTypes = []interface{}{
	(*SumRequest)(nil),            // 0: sum.SumRequest
	(*SumResponse)(nil),           // 1: sum.SumResponse
	(*NumberRequest)(nil),         // 2: sum.NumberRequest
	(*AverageResultResponse)(nil), // 3: sum.AverageResultResponse
	(*NumReq)(nil),                // 4: sum.NumReq
	(*NumResp)(nil),               // 5: sum.NumResp
}
var file_sum_proto_depIdxs = []int32{
	0, // 0: sum.SumService.GetSumResult:input_type -> sum.SumRequest
	0, // 1: sum.SumService.GetStreamingSumResult:input_type -> sum.SumRequest
	2, // 2: sum.SumService.AverageStreamingResult:input_type -> sum.NumberRequest
	4, // 3: sum.SumService.EvenOrOdd:input_type -> sum.NumReq
	1, // 4: sum.SumService.GetSumResult:output_type -> sum.SumResponse
	1, // 5: sum.SumService.GetStreamingSumResult:output_type -> sum.SumResponse
	3, // 6: sum.SumService.AverageStreamingResult:output_type -> sum.AverageResultResponse
	5, // 7: sum.SumService.EvenOrOdd:output_type -> sum.NumResp
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_sum_proto_init() }
func file_sum_proto_init() {
	if File_sum_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sum_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sum_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sum_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sum_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AverageResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sum_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sum_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sum_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sum_proto_goTypes,
		DependencyIndexes: file_sum_proto_depIdxs,
		MessageInfos:      file_sum_proto_msgTypes,
	}.Build()
	File_sum_proto = out.File
	file_sum_proto_rawDesc = nil
	file_sum_proto_goTypes = nil
	file_sum_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SumServiceClient is the client API for SumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SumServiceClient interface {
	GetSumResult(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error)
	GetStreamingSumResult(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (SumService_GetStreamingSumResultClient, error)
	AverageStreamingResult(ctx context.Context, opts ...grpc.CallOption) (SumService_AverageStreamingResultClient, error)
	EvenOrOdd(ctx context.Context, opts ...grpc.CallOption) (SumService_EvenOrOddClient, error)
}

type sumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSumServiceClient(cc grpc.ClientConnInterface) SumServiceClient {
	return &sumServiceClient{cc}
}

func (c *sumServiceClient) GetSumResult(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, "/sum.SumService/GetSumResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sumServiceClient) GetStreamingSumResult(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (SumService_GetStreamingSumResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SumService_serviceDesc.Streams[0], "/sum.SumService/GetStreamingSumResult", opts...)
	if err != nil {
		return nil, err
	}
	x := &sumServiceGetStreamingSumResultClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SumService_GetStreamingSumResultClient interface {
	Recv() (*SumResponse, error)
	grpc.ClientStream
}

type sumServiceGetStreamingSumResultClient struct {
	grpc.ClientStream
}

func (x *sumServiceGetStreamingSumResultClient) Recv() (*SumResponse, error) {
	m := new(SumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sumServiceClient) AverageStreamingResult(ctx context.Context, opts ...grpc.CallOption) (SumService_AverageStreamingResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SumService_serviceDesc.Streams[1], "/sum.SumService/AverageStreamingResult", opts...)
	if err != nil {
		return nil, err
	}
	x := &sumServiceAverageStreamingResultClient{stream}
	return x, nil
}

type SumService_AverageStreamingResultClient interface {
	Send(*NumberRequest) error
	CloseAndRecv() (*AverageResultResponse, error)
	grpc.ClientStream
}

type sumServiceAverageStreamingResultClient struct {
	grpc.ClientStream
}

func (x *sumServiceAverageStreamingResultClient) Send(m *NumberRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sumServiceAverageStreamingResultClient) CloseAndRecv() (*AverageResultResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AverageResultResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sumServiceClient) EvenOrOdd(ctx context.Context, opts ...grpc.CallOption) (SumService_EvenOrOddClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SumService_serviceDesc.Streams[2], "/sum.SumService/EvenOrOdd", opts...)
	if err != nil {
		return nil, err
	}
	x := &sumServiceEvenOrOddClient{stream}
	return x, nil
}

type SumService_EvenOrOddClient interface {
	Send(*NumReq) error
	Recv() (*NumResp, error)
	grpc.ClientStream
}

type sumServiceEvenOrOddClient struct {
	grpc.ClientStream
}

func (x *sumServiceEvenOrOddClient) Send(m *NumReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sumServiceEvenOrOddClient) Recv() (*NumResp, error) {
	m := new(NumResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SumServiceServer is the server API for SumService service.
type SumServiceServer interface {
	GetSumResult(context.Context, *SumRequest) (*SumResponse, error)
	GetStreamingSumResult(*SumRequest, SumService_GetStreamingSumResultServer) error
	AverageStreamingResult(SumService_AverageStreamingResultServer) error
	EvenOrOdd(SumService_EvenOrOddServer) error
}

// UnimplementedSumServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSumServiceServer struct {
}

func (*UnimplementedSumServiceServer) GetSumResult(context.Context, *SumRequest) (*SumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSumResult not implemented")
}
func (*UnimplementedSumServiceServer) GetStreamingSumResult(*SumRequest, SumService_GetStreamingSumResultServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStreamingSumResult not implemented")
}
func (*UnimplementedSumServiceServer) AverageStreamingResult(SumService_AverageStreamingResultServer) error {
	return status.Errorf(codes.Unimplemented, "method AverageStreamingResult not implemented")
}
func (*UnimplementedSumServiceServer) EvenOrOdd(SumService_EvenOrOddServer) error {
	return status.Errorf(codes.Unimplemented, "method EvenOrOdd not implemented")
}

func RegisterSumServiceServer(s *grpc.Server, srv SumServiceServer) {
	s.RegisterService(&_SumService_serviceDesc, srv)
}

func _SumService_GetSumResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SumServiceServer).GetSumResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sum.SumService/GetSumResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SumServiceServer).GetSumResult(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SumService_GetStreamingSumResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SumRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SumServiceServer).GetStreamingSumResult(m, &sumServiceGetStreamingSumResultServer{stream})
}

type SumService_GetStreamingSumResultServer interface {
	Send(*SumResponse) error
	grpc.ServerStream
}

type sumServiceGetStreamingSumResultServer struct {
	grpc.ServerStream
}

func (x *sumServiceGetStreamingSumResultServer) Send(m *SumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SumService_AverageStreamingResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SumServiceServer).AverageStreamingResult(&sumServiceAverageStreamingResultServer{stream})
}

type SumService_AverageStreamingResultServer interface {
	SendAndClose(*AverageResultResponse) error
	Recv() (*NumberRequest, error)
	grpc.ServerStream
}

type sumServiceAverageStreamingResultServer struct {
	grpc.ServerStream
}

func (x *sumServiceAverageStreamingResultServer) SendAndClose(m *AverageResultResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sumServiceAverageStreamingResultServer) Recv() (*NumberRequest, error) {
	m := new(NumberRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SumService_EvenOrOdd_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SumServiceServer).EvenOrOdd(&sumServiceEvenOrOddServer{stream})
}

type SumService_EvenOrOddServer interface {
	Send(*NumResp) error
	Recv() (*NumReq, error)
	grpc.ServerStream
}

type sumServiceEvenOrOddServer struct {
	grpc.ServerStream
}

func (x *sumServiceEvenOrOddServer) Send(m *NumResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sumServiceEvenOrOddServer) Recv() (*NumReq, error) {
	m := new(NumReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SumService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sum.SumService",
	HandlerType: (*SumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSumResult",
			Handler:    _SumService_GetSumResult_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStreamingSumResult",
			Handler:       _SumService_GetStreamingSumResult_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AverageStreamingResult",
			Handler:       _SumService_AverageStreamingResult_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "EvenOrOdd",
			Handler:       _SumService_EvenOrOdd_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sum.proto",
}
